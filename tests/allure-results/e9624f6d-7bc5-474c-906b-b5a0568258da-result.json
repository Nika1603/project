{"name": "test_add_pizza_to_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".button.product_type_simple.add_to_cart_button\"}\n  (Session info: chrome=125.0.6422.113); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n0   chromedriver                        0x00000001025c64c8 chromedriver + 4302024\n1   chromedriver                        0x00000001025bee10 chromedriver + 4271632\n2   chromedriver                        0x00000001021f019c chromedriver + 278940\n3   chromedriver                        0x00000001022322c4 chromedriver + 549572\n4   chromedriver                        0x000000010222885c chromedriver + 510044\n5   chromedriver                        0x000000010226ac5c chromedriver + 781404\n6   chromedriver                        0x0000000102227004 chromedriver + 503812\n7   chromedriver                        0x00000001022279ec chromedriver + 506348\n8   chromedriver                        0x000000010258e510 chromedriver + 4072720\n9   chromedriver                        0x0000000102592fbc chromedriver + 4091836\n10  chromedriver                        0x0000000102575754 chromedriver + 3970900\n11  chromedriver                        0x00000001025938a4 chromedriver + 4094116\n12  chromedriver                        0x00000001025686d4 chromedriver + 3917524\n13  chromedriver                        0x00000001025b0b08 chromedriver + 4213512\n14  chromedriver                        0x00000001025b0c84 chromedriver + 4213892\n15  chromedriver                        0x00000001025bea08 chromedriver + 4270600\n16  libsystem_pthread.dylib             0x000000019e236f94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x000000019e231d34 thread_start + 8", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b1090319be40eab9cf814a6eddc51c25\")>\n\n    def test_add_pizza_to_cart(browser):\n        try:\n            url = \"https://pizzeria.skillbox.cc/\"\n            logger.info(f\"Opening page: {url}\")\n            browser.get(url)\n            allure.attach(browser.get_screenshot_as_png(), name=\"Main Page\", attachment_type=AttachmentType.PNG)\n    \n            pizza_image = browser.find_element(By.CSS_SELECTOR,\n                                               '#accesspress_store_product-5 > ul > div > div > li:nth-child(6) > div > a:nth-child(1) > img')\n            logger.info(\"Pizza image found on the page\")\n    \n            actions = webdriver.ActionChains(browser)\n            actions.move_to_element(pizza_image).perform()\n    \n            add_to_cart_btn = pizza_image.find_element(By.CSS_SELECTOR, '.button.product_type_simple.add_to_cart_button')\n            add_to_cart_btn.click()\n            time.sleep(20)\n    \n    \n            url_cart = \"https://pizzeria.skillbox.cc/cart/\"\n            logger.info(f\"Opening cart page: {url_cart}\")\n            browser.get(url_cart)\n            allure.attach(browser.get_screenshot_as_png(), name=\"Cart Page\", attachment_type=AttachmentType.PNG)\n    \n    \n            pizza_items_in_cart = browser.find_elements(By.CLASS_NAME, 'cart_item')\n            assert len(pizza_items_in_cart) > 0, \"Пицца не найдена в корзине\"\n    \n            logger.info(\"Pizza successfully added to cart\")\n    \n        except Exception as e:\n            logger.error(f\"Error in the test: {e}\")\n            allure.attach(browser.get_screenshot_as_png(), name=\"Error\", attachment_type=AttachmentType.PNG)\n>           raise e\n\ntest_basket.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_basket.py:36: in test_add_pizza_to_cart\n    add_to_cart_btn = pizza_image.find_element(By.CSS_SELECTOR, '.button.product_type_simple.add_to_cart_button')\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:417: in find_element\n    return self._execute(Command.FIND_CHILD_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10476f580>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...00019e236f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x000000019e231d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".button.product_type_simple.add_to_cart_button\"}\nE         (Session info: chrome=125.0.6422.113); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       0   chromedriver                        0x00000001025c64c8 chromedriver + 4302024\nE       1   chromedriver                        0x00000001025bee10 chromedriver + 4271632\nE       2   chromedriver                        0x00000001021f019c chromedriver + 278940\nE       3   chromedriver                        0x00000001022322c4 chromedriver + 549572\nE       4   chromedriver                        0x000000010222885c chromedriver + 510044\nE       5   chromedriver                        0x000000010226ac5c chromedriver + 781404\nE       6   chromedriver                        0x0000000102227004 chromedriver + 503812\nE       7   chromedriver                        0x00000001022279ec chromedriver + 506348\nE       8   chromedriver                        0x000000010258e510 chromedriver + 4072720\nE       9   chromedriver                        0x0000000102592fbc chromedriver + 4091836\nE       10  chromedriver                        0x0000000102575754 chromedriver + 3970900\nE       11  chromedriver                        0x00000001025938a4 chromedriver + 4094116\nE       12  chromedriver                        0x00000001025686d4 chromedriver + 3917524\nE       13  chromedriver                        0x00000001025b0b08 chromedriver + 4213512\nE       14  chromedriver                        0x00000001025b0c84 chromedriver + 4213892\nE       15  chromedriver                        0x00000001025bea08 chromedriver + 4270600\nE       16  libsystem_pthread.dylib             0x000000019e236f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x000000019e231d34 thread_start + 8\n\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException"}, "attachments": [{"name": "Main Page", "source": "bdb98083-99c3-415f-b06a-c1866409b58c-attachment.png", "type": "image/png"}, {"name": "Error", "source": "f7c9830e-6a56-4942-84ed-3459f0a12e70-attachment.png", "type": "image/png"}, {"name": "log", "source": "74d4c45d-02e9-4902-8df0-01cac1461cad-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "96a70597-eb37-4a22-861c-997db41f0185-attachment.txt", "type": "text/plain"}], "start": 1717255270050, "stop": 1717255271339, "uuid": "f3d878db-64fa-4def-84f6-23f41580bb89", "historyId": "e38fc498a1f7bd75416eab20f760741b", "testCaseId": "e38fc498a1f7bd75416eab20f760741b", "fullName": "tests.test_basket#test_add_pizza_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_basket"}, {"name": "host", "value": "MacBook-Air-MacBook.local"}, {"name": "thread", "value": "6342-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_basket"}]}