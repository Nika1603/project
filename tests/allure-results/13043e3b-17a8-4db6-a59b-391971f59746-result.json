{"name": "test_bonus_system", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Заявка отправлена, дождитесь, пожалуйста, оформления карты!\nMessage: unexpected alert open: {Alert text : Заявка отправлена, дождитесь, пожалуйста, оформления карты!}\n  (Session info: chrome=125.0.6422.113)\nStacktrace:\n0   chromedriver                        0x00000001004c24c8 chromedriver + 4302024\n1   chromedriver                        0x00000001004bae10 chromedriver + 4271632\n2   chromedriver                        0x00000001000ec19c chromedriver + 278940\n3   chromedriver                        0x0000000100167168 chromedriver + 782696\n4   chromedriver                        0x0000000100123004 chromedriver + 503812\n5   chromedriver                        0x00000001001239ec chromedriver + 506348\n6   chromedriver                        0x000000010048a510 chromedriver + 4072720\n7   chromedriver                        0x000000010048efbc chromedriver + 4091836\n8   chromedriver                        0x0000000100471754 chromedriver + 3970900\n9   chromedriver                        0x000000010048f8a4 chromedriver + 4094116\n10  chromedriver                        0x00000001004646d4 chromedriver + 3917524\n11  chromedriver                        0x00000001004acb08 chromedriver + 4213512\n12  chromedriver                        0x00000001004acc84 chromedriver + 4213892\n13  chromedriver                        0x00000001004baa08 chromedriver + 4270600\n14  libsystem_pthread.dylib             0x000000019b32ef94 _pthread_start + 136\n15  libsystem_pthread.dylib             0x000000019b329d34 thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cbafdbd500c704aaa806e2f608cf2213\")>\n\n    def test_bonus_system(driver):\n        driver.get(\"http://pizzeria.skillbox.cc/bonus/\")\n    \n    \n        time.sleep(2)\n    \n    \n        name_input = WebDriverWait(driver, 20).until(\n            EC.presence_of_element_located((By.ID, \"bonus_username\"))\n        )\n        name_input.send_keys(\"Veronika Stelmax\")\n    \n    \n        phone_input = WebDriverWait(driver, 20).until(\n            EC.presence_of_element_located((By.ID, \"bonus_phone\"))\n        )\n        phone_input.send_keys(\"74232497778\")\n    \n    \n        submit_button = WebDriverWait(driver, 20).until(\n            EC.element_to_be_clickable((By.XPATH, \"//button[contains(@class, 'woocommerce-form-register__submit')]\"))\n        )\n        submit_button.click()\n    \n    \n>       success_message = WebDriverWait(driver, 20).until(\n            EC.presence_of_element_located(\n                (By.XPATH, \"//p[@class='woocommerce-bonus-notice woocommerce-bonus-notice--success']\"))\n        )\n\ntest_bonus_system.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10471db80>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Заявка отправлена, дождитесь, пожалуйста, оформления карты!\"},\"err...00019b32ef94 _pthread_start + 136\\\\n15  libsystem_pthread.dylib             0x000000019b329d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Заявка отправлена, дождитесь, пожалуйста, оформления карты!\nE           Message: unexpected alert open: {Alert text : Заявка отправлена, дождитесь, пожалуйста, оформления карты!}\nE             (Session info: chrome=125.0.6422.113)\nE           Stacktrace:\nE           0   chromedriver                        0x00000001004c24c8 chromedriver + 4302024\nE           1   chromedriver                        0x00000001004bae10 chromedriver + 4271632\nE           2   chromedriver                        0x00000001000ec19c chromedriver + 278940\nE           3   chromedriver                        0x0000000100167168 chromedriver + 782696\nE           4   chromedriver                        0x0000000100123004 chromedriver + 503812\nE           5   chromedriver                        0x00000001001239ec chromedriver + 506348\nE           6   chromedriver                        0x000000010048a510 chromedriver + 4072720\nE           7   chromedriver                        0x000000010048efbc chromedriver + 4091836\nE           8   chromedriver                        0x0000000100471754 chromedriver + 3970900\nE           9   chromedriver                        0x000000010048f8a4 chromedriver + 4094116\nE           10  chromedriver                        0x00000001004646d4 chromedriver + 3917524\nE           11  chromedriver                        0x00000001004acb08 chromedriver + 4213512\nE           12  chromedriver                        0x00000001004acc84 chromedriver + 4213892\nE           13  chromedriver                        0x00000001004baa08 chromedriver + 4270600\nE           14  libsystem_pthread.dylib             0x000000019b32ef94 _pthread_start + 136\nE           15  libsystem_pthread.dylib             0x000000019b329d34 thread_start + 8\n\n/opt/miniconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:228: UnexpectedAlertPresentException"}, "start": 1717422074673, "stop": 1717422077358, "uuid": "460029ad-5b58-47cb-a341-a6c8095a49b4", "historyId": "b22fd9d36325f36fe420d1fbd6408b0a", "testCaseId": "b22fd9d36325f36fe420d1fbd6408b0a", "fullName": "tests.test_bonus_system#test_bonus_system", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_bonus_system"}, {"name": "host", "value": "MacBook-Air-MacBook.local"}, {"name": "thread", "value": "11908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_bonus_system"}]}